package iostream;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.TreeMap;

public class SearchInFile {
	public static char charInFile(String pathA, int line) throws IOException {
		char[] ch = "Hello worklsd aeleetaasf aaa".toCharArray();
		// BufferedReader in = new BufferedReader(new FileReader(pathA));
		// try {
		//
		// for (int i = 0; i < line; i++) {
		// in.readLine();
		// }
		// ch = in.readLine().toCharArray();
		// } finally {
		// in.close();
		// }
		int counterMax = 0;
		int counter = 0;
		char max = ch[0];
		for (int i = 0; i < ch.length; i++) {
			for (int j = 0; j < ch.length; j++) {
				if (ch[i] == ch[j]) {
					counter++;

				}
			}
			if (counter > counterMax) {
				max = ch[i];
				counterMax = counter;
			}
			counter = 0;
		}

		return max;
	}

	public static String wordInFile(String pathA) throws IOException {
		String word;
		StringBuilder file = new StringBuilder();
		TreeMap<String, Integer> map = new TreeMap<>();
		BufferedReader reader = new BufferedReader(new FileReader(pathA));
		while ((word = reader.readLine()) != null) {
			file.append(word + " ");
		}
		System.out.println(file.toString());
		StringTokenizer token = new StringTokenizer(file.toString(),
				" \t\n\r,./[]{}1234567890");
		String buffer;
		while (token.hasMoreTokens()) {
			buffer = token.nextToken();
			if (map.containsKey(buffer)){
				int i = map.get(buffer);
				map.replace(buffer, i++);
			} else {
				map.put(buffer, 1);
			}
		}
		System.out.println(map);
		reader.close();
		return map.toString();
	}

}
